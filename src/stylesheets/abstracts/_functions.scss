// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Load Sass built-in modules
@use 'sass:color';

/// Load custom modules
@use './variables' as v;
@use '../themes/' as t;

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: v.$base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: v.$base-url) {
  @return asset($base, 'fonts/', $path);
}

/// Returns font size from the text-settings table
/// @param {Number} $size - font size
/// @return {String}
/// @require $text-settings
@function text-scale($size) {
  @return map-get(map-get(v.$text-settings, $size), 'font-size');
}

/// Returns line height from the text-settings table
/// @param {Number} $size - line height
/// @return {Number}
/// @require $text-settings
@function line-height($size) {
  @return map-get(map-get(v.$text-settings, $size), 'line-height');
}

/// Returns color from the theme-colors table
/// @param {Sring} $key - color name
/// @param {Sring} $variant - color variant
/// @param {Number} $alpha [0] - transparency
/// @return {Color}
/// @require $theme-colors
@function theme-color($key: 'primary', $variant: 'base', $alpha: 0) {
  $map: map-get(t.$theme-colors, $key);
  @return color.adjust(map-get($map, $variant), $alpha: $alpha);
}
